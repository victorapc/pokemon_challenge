// Mocks generated by Mockito 5.4.2 from annotations
// in pokemon_challenge/test/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i12;
import 'dart:typed_data' as _i13;

import 'package:http/http.dart' as _i4;
import 'package:mobx/mobx.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pokemon_challenge/data/datasources/pokemon_remote_datasource.dart'
    as _i10;
import 'package:pokemon_challenge/data/models/pokemon_detail_model.dart' as _i3;
import 'package:pokemon_challenge/data/models/pokemon_model.dart' as _i11;
import 'package:pokemon_challenge/domain/entities/pokemon.dart' as _i9;
import 'package:pokemon_challenge/domain/entities/pokemon_detail.dart' as _i2;
import 'package:pokemon_challenge/domain/repositories/pokemon_repository.dart'
    as _i5;
import 'package:pokemon_challenge/domain/usecases/get_pokemon_detail_usecase.dart'
    as _i14;
import 'package:pokemon_challenge/domain/usecases/get_pokemons_usecase.dart'
    as _i6;
import 'package:pokemon_challenge/presentation/stores/pokemon_store.dart'
    as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePokemonDetail_0 extends _i1.SmartFake implements _i2.PokemonDetail {
  _FakePokemonDetail_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePokemonDetailModel_1 extends _i1.SmartFake
    implements _i3.PokemonDetailModel {
  _FakePokemonDetailModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePokemonRepository_4 extends _i1.SmartFake
    implements _i5.PokemonRepository {
  _FakePokemonRepository_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetPokemonsUseCase_5 extends _i1.SmartFake
    implements _i6.GetPokemonsUseCase {
  _FakeGetPokemonsUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObservableList_6<T> extends _i1.SmartFake
    implements _i7.ObservableList<T> {
  _FakeObservableList_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeReactiveContext_7 extends _i1.SmartFake
    implements _i7.ReactiveContext {
  _FakeReactiveContext_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PokemonRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonRepository extends _i1.Mock implements _i5.PokemonRepository {
  MockPokemonRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i9.Pokemon>> getPokemons() => (super.noSuchMethod(
        Invocation.method(
          #getPokemons,
          [],
        ),
        returnValue: _i8.Future<List<_i9.Pokemon>>.value(<_i9.Pokemon>[]),
      ) as _i8.Future<List<_i9.Pokemon>>);

  @override
  _i8.Future<_i2.PokemonDetail> getPokemonDetail(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPokemonDetail,
          [id],
        ),
        returnValue: _i8.Future<_i2.PokemonDetail>.value(_FakePokemonDetail_0(
          this,
          Invocation.method(
            #getPokemonDetail,
            [id],
          ),
        )),
      ) as _i8.Future<_i2.PokemonDetail>);
}

/// A class which mocks [PokemonRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonRemoteDataSource extends _i1.Mock
    implements _i10.PokemonRemoteDataSource {
  MockPokemonRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<List<_i11.PokemonModel>> getPokemons() => (super.noSuchMethod(
        Invocation.method(
          #getPokemons,
          [],
        ),
        returnValue:
            _i8.Future<List<_i11.PokemonModel>>.value(<_i11.PokemonModel>[]),
      ) as _i8.Future<List<_i11.PokemonModel>>);

  @override
  _i8.Future<_i3.PokemonDetailModel> getPokemonDetail(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPokemonDetail,
          [id],
        ),
        returnValue:
            _i8.Future<_i3.PokemonDetailModel>.value(_FakePokemonDetailModel_1(
          this,
          Invocation.method(
            #getPokemonDetail,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.PokemonDetailModel>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i4.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i12.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i4.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i4.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i13.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i13.Uint8List>.value(_i13.Uint8List(0)),
      ) as _i8.Future<_i13.Uint8List>);

  @override
  _i8.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i4.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [GetPokemonsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPokemonsUseCase extends _i1.Mock
    implements _i6.GetPokemonsUseCase {
  MockGetPokemonsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.PokemonRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePokemonRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.PokemonRepository);

  @override
  _i8.Future<List<_i9.Pokemon>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i8.Future<List<_i9.Pokemon>>.value(<_i9.Pokemon>[]),
      ) as _i8.Future<List<_i9.Pokemon>>);
}

/// A class which mocks [GetPokemonDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPokemonDetailUseCase extends _i1.Mock
    implements _i14.GetPokemonDetailUseCase {
  MockGetPokemonDetailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.PokemonRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePokemonRepository_4(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i5.PokemonRepository);

  @override
  _i8.Future<_i2.PokemonDetail> call(int? id) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [id],
        ),
        returnValue: _i8.Future<_i2.PokemonDetail>.value(_FakePokemonDetail_0(
          this,
          Invocation.method(
            #call,
            [id],
          ),
        )),
      ) as _i8.Future<_i2.PokemonDetail>);
}

/// A class which mocks [PokemonStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonStore extends _i1.Mock implements _i15.PokemonStore {
  MockPokemonStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetPokemonsUseCase get getPokemonsUseCase => (super.noSuchMethod(
        Invocation.getter(#getPokemonsUseCase),
        returnValue: _FakeGetPokemonsUseCase_5(
          this,
          Invocation.getter(#getPokemonsUseCase),
        ),
      ) as _i6.GetPokemonsUseCase);

  @override
  _i7.ObservableList<_i9.Pokemon> get pokemons => (super.noSuchMethod(
        Invocation.getter(#pokemons),
        returnValue: _FakeObservableList_6<_i9.Pokemon>(
          this,
          Invocation.getter(#pokemons),
        ),
      ) as _i7.ObservableList<_i9.Pokemon>);

  @override
  set pokemons(_i7.ObservableList<_i9.Pokemon>? value) => super.noSuchMethod(
        Invocation.setter(
          #pokemons,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get searchText => (super.noSuchMethod(
        Invocation.getter(#searchText),
        returnValue: '',
      ) as String);

  @override
  set searchText(String? value) => super.noSuchMethod(
        Invocation.setter(
          #searchText,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get errorMessage => (super.noSuchMethod(
        Invocation.getter(#errorMessage),
        returnValue: '',
      ) as String);

  @override
  set errorMessage(String? value) => super.noSuchMethod(
        Invocation.setter(
          #errorMessage,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  set isLoading(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i9.Pokemon> get filteredPokemons => (super.noSuchMethod(
        Invocation.getter(#filteredPokemons),
        returnValue: <_i9.Pokemon>[],
      ) as List<_i9.Pokemon>);

  @override
  _i7.ReactiveContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeReactiveContext_7(
          this,
          Invocation.getter(#context),
        ),
      ) as _i7.ReactiveContext);

  @override
  _i8.Future<void> loadPokemons() => (super.noSuchMethod(
        Invocation.method(
          #loadPokemons,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void setSearchText(String? value) => super.noSuchMethod(
        Invocation.method(
          #setSearchText,
          [value],
        ),
        returnValueForMissingStub: null,
      );
}
